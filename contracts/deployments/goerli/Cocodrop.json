{
  "address": "0x823D972BAcBa033BFca208738847cC7135573316",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "airdropId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfs",
          "type": "string"
        }
      ],
      "name": "NewAirdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "airdropId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "airdrops",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfs",
          "type": "string"
        }
      ],
      "name": "createAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_airdropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_airdropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8834c4be68f9c402d04408c99ea34f9688ea54ab6989d14bd68f0e06e0a1f88",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x823D972BAcBa033BFca208738847cC7135573316",
    "transactionIndex": 29,
    "gasUsed": "563633",
    "logsBloom": "0x
    "blockHash": "0x6d713a51f4da87df60bdbe97cc91c727d2163e18d3a3a9cbdf7f618e150d5b0b",
    "transactionHash": "0xc8834c4be68f9c402d04408c99ea34f9688ea54ab6989d14bd68f0e06e0a1f88",
    "logs": [],
    "blockNumber": 7735837,
    "cumulativeGasUsed": "6806394",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a8460e1d6749467ae17d8d747b31a27c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"airdropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"}],\"name\":\"NewAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"airdropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdrops\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"}],\"name\":\"createAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airdropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airdropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"...\",\"kind\":\"dev\",\"methods\":{\"verifyClaim(uint256,uint256,bytes32[])\":{\"params\":{\"_airdropId\":\"The id of the airdrop.\",\"_claimedAmount\":\"The amount being claimed.\",\"_merkleProof\":\"The merkle proof for the claim, sorted from the leaf to the root of the tree.\"}}},\"title\":\"Cocodrop\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyClaim(uint256,uint256,bytes32[])\":{\"notice\":\"Verifies a claim.\"}},\"notice\":\"...\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Cocodrop.sol\":\"Cocodrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"src/Cocodrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @authors: [@greenlucid, @shotaronowhere]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n */\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title Cocodrop\\n * @notice ...\\n * @dev ...\\n */\\ncontract Cocodrop {\\n\\n  struct Airdrop {\\n    bytes32 merkleRoot;\\n    IERC20 token;\\n    uint256 amount;\\n  }\\n\\n  event NewAirdrop(uint256 indexed airdropId, bytes32 merkleRoot, IERC20 token, uint256 amount, string ipfs);\\n  event Redemption(uint256 indexed airdropId, uint256 amount);\\n\\n  Airdrop[] public airdrops;\\n  mapping(uint256 => mapping(address => bool)) public redeemed;\\n\\n\\n  function createAirdrop(bytes32 _merkleRoot, IERC20 _token, uint256 _amount, string calldata _ipfs) external {\\n    require(_token.transferFrom(msg.sender, address(this), _amount), \\\"Transfer failed\\\");\\n    airdrops.push(Airdrop({\\n      merkleRoot: _merkleRoot,\\n      token: _token,\\n      amount: _amount\\n    }));\\n    emit NewAirdrop(airdrops.length - 1, _merkleRoot, _token, _amount, _ipfs);\\n  }\\n\\n  function redeem(uint256 _airdropId, uint256 _claimedAmount, bytes32[] memory _merkleProof) public {\\n    uint256 airdropBalance = airdrops[_airdropId].amount;\\n    // check\\n    require(_claimedAmount <= airdropBalance, \\\"Insufficient airdrop balance.\\\");\\n    require(!redeemed[_airdropId][msg.sender], \\\"Already redeemed\\\");\\n    require(verifyClaim(_airdropId, _claimedAmount, _merkleProof), \\\"Invalid redemption.\\\");\\n    // effects\\n    redeemed[_airdropId][msg.sender] = true;\\n    airdrops[_airdropId].amount -= _claimedAmount;\\n    // transfer goes here\\n    airdrops[_airdropId].token.transfer(msg.sender, _claimedAmount);\\n    emit Redemption(_airdropId, _claimedAmount);\\n  }\\n\\n    /**\\n     * @notice Verifies a claim.\\n     * @param _claimedAmount The amount being claimed.\\n     * @param _merkleProof The merkle proof for the claim, sorted from the leaf to the root of the tree.\\n     * @param _airdropId The id of the airdrop.\\n     */\\n    function verifyClaim(\\n        uint256 _airdropId,\\n        uint256 _claimedAmount,\\n        bytes32[] memory _merkleProof\\n    )\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n      bytes32 leaf;\\n      address sender = msg.sender;\\n      assembly {\\n        // efficient hash abi.encode(msg.sender, _claimedAmount)\\n        mstore(0x00, sender)\\n        mstore(0x20, _claimedAmount)\\n        leaf := keccak256(0x00, 0x40)\\n      }\\n      return MerkleProof.verify(_merkleProof, airdrops[_airdropId].merkleRoot, leaf);\\n    }\\n}\",\"keccak256\":\"0x6e7f64c3d334d68091eefcf4065ca90eda01acfafd93ca9b3ff5ca9f20c15002\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061093d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635ddb08451461005c57806360db50821461009f5780637306239f146100d557806383904485146100ea578063b97bff1a146100fd575b600080fd5b61008a61006a366004610676565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b6100b26100ad3660046106a6565b610110565b604080519384526001600160a01b03909216602084015290820152606001610096565b6100e86100e33660046106bf565b61014f565b005b61008a6100f836600461076b565b61031c565b6100e861010b36600461076b565b61036c565b6000818154811061012057600080fd5b60009182526020909120600390910201805460018201546002909201549092506001600160a01b039091169083565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af11580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c6919061083e565b6102095760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b604080516060810182528681526001600160a01b0386811660208301908152928201868152600080546001808201835582805294517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360039092029182015594517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564860180546001600160a01b0319169190941617909255517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5659093019290925590546102d69190610876565b7fa07dc081e463c1b1f74a9fbaeb0d45590e0121e6dd8a976da3765021ba40c797868686868660405161030d959493929190610889565b60405180910390a25050505050565b6000806000339050806000528460205260406000209150610362846000888154811061034a5761034a6108d8565b906000526020600020906003020160000154846105c7565b9695505050505050565b6000808481548110610380576103806108d8565b9060005260206000209060030201600201549050808311156103e45760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742061697264726f702062616c616e63652e0000006044820152606401610200565b600084815260016020908152604080832033845290915290205460ff16156104415760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995919595b595960821b6044820152606401610200565b61044c84848461031c565b61048e5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103932b232b6b83a34b7b71760691b6044820152606401610200565b60008481526001602081815260408084203385529091528220805460ff191690911790558054849190869081106104c7576104c76108d8565b906000526020600020906003020160020160008282546104e79190610876565b90915550506000805485908110610500576105006108d8565b600091825260209091206003909102016001015460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610562573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610586919061083e565b50837fba7975764e321f07896c9c9852213d675ea0ab36b67e22a7e6d762b0fddd30d9846040516105b991815260200190565b60405180910390a250505050565b6000826105d485846105dd565b14949350505050565b600081815b84518110156106225761060e82868381518110610601576106016108d8565b602002602001015161062c565b91508061061a816108ee565b9150506105e2565b5090505b92915050565b6000818310610648576000828152602084905260409020610657565b60008381526020839052604090205b9392505050565b6001600160a01b038116811461067357600080fd5b50565b6000806040838503121561068957600080fd5b82359150602083013561069b8161065e565b809150509250929050565b6000602082840312156106b857600080fd5b5035919050565b6000806000806000608086880312156106d757600080fd5b8535945060208601356106e98161065e565b935060408601359250606086013567ffffffffffffffff8082111561070d57600080fd5b818801915088601f83011261072157600080fd5b81358181111561073057600080fd5b89602082850101111561074257600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561078057600080fd5b833592506020808501359250604085013567ffffffffffffffff808211156107a757600080fd5b818701915087601f8301126107bb57600080fd5b8135818111156107cd576107cd610755565b8060051b604051601f19603f830116810181811085821117156107f2576107f2610755565b60405291825284820192508381018501918a83111561081057600080fd5b938501935b8285101561082e57843584529385019392850192610815565b8096505050505050509250925092565b60006020828403121561085057600080fd5b8151801515811461065757600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561062657610626610860565b8581526001600160a01b0385166020820152604081018490526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161090057610900610860565b506001019056fea26469706673582212202d83790f8763f951c1372a8cdb349ac1b7838faec2acef7ee3a3083bad2a85a264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80635ddb08451461005c57806360db50821461009f5780637306239f146100d557806383904485146100ea578063b97bff1a146100fd575b600080fd5b61008a61006a366004610676565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b6100b26100ad3660046106a6565b610110565b604080519384526001600160a01b03909216602084015290820152606001610096565b6100e86100e33660046106bf565b61014f565b005b61008a6100f836600461076b565b61031c565b6100e861010b36600461076b565b61036c565b6000818154811061012057600080fd5b60009182526020909120600390910201805460018201546002909201549092506001600160a01b039091169083565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af11580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c6919061083e565b6102095760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b604080516060810182528681526001600160a01b0386811660208301908152928201868152600080546001808201835582805294517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360039092029182015594517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564860180546001600160a01b0319169190941617909255517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5659093019290925590546102d69190610876565b7fa07dc081e463c1b1f74a9fbaeb0d45590e0121e6dd8a976da3765021ba40c797868686868660405161030d959493929190610889565b60405180910390a25050505050565b6000806000339050806000528460205260406000209150610362846000888154811061034a5761034a6108d8565b906000526020600020906003020160000154846105c7565b9695505050505050565b6000808481548110610380576103806108d8565b9060005260206000209060030201600201549050808311156103e45760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742061697264726f702062616c616e63652e0000006044820152606401610200565b600084815260016020908152604080832033845290915290205460ff16156104415760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995919595b595960821b6044820152606401610200565b61044c84848461031c565b61048e5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103932b232b6b83a34b7b71760691b6044820152606401610200565b60008481526001602081815260408084203385529091528220805460ff191690911790558054849190869081106104c7576104c76108d8565b906000526020600020906003020160020160008282546104e79190610876565b90915550506000805485908110610500576105006108d8565b600091825260209091206003909102016001015460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610562573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610586919061083e565b50837fba7975764e321f07896c9c9852213d675ea0ab36b67e22a7e6d762b0fddd30d9846040516105b991815260200190565b60405180910390a250505050565b6000826105d485846105dd565b14949350505050565b600081815b84518110156106225761060e82868381518110610601576106016108d8565b602002602001015161062c565b91508061061a816108ee565b9150506105e2565b5090505b92915050565b6000818310610648576000828152602084905260409020610657565b60008381526020839052604090205b9392505050565b6001600160a01b038116811461067357600080fd5b50565b6000806040838503121561068957600080fd5b82359150602083013561069b8161065e565b809150509250929050565b6000602082840312156106b857600080fd5b5035919050565b6000806000806000608086880312156106d757600080fd5b8535945060208601356106e98161065e565b935060408601359250606086013567ffffffffffffffff8082111561070d57600080fd5b818801915088601f83011261072157600080fd5b81358181111561073057600080fd5b89602082850101111561074257600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561078057600080fd5b833592506020808501359250604085013567ffffffffffffffff808211156107a757600080fd5b818701915087601f8301126107bb57600080fd5b8135818111156107cd576107cd610755565b8060051b604051601f19603f830116810181811085821117156107f2576107f2610755565b60405291825284820192508381018501918a83111561081057600080fd5b938501935b8285101561082e57843584529385019392850192610815565b8096505050505050509250925092565b60006020828403121561085057600080fd5b8151801515811461065757600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561062657610626610860565b8581526001600160a01b0385166020820152604081018490526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161090057610900610860565b506001019056fea26469706673582212202d83790f8763f951c1372a8cdb349ac1b7838faec2acef7ee3a3083bad2a85a264736f6c63430008110033",
  "devdoc": {
    "details": "...",
    "kind": "dev",
    "methods": {
      "verifyClaim(uint256,uint256,bytes32[])": {
        "params": {
          "_airdropId": "The id of the airdrop.",
          "_claimedAmount": "The amount being claimed.",
          "_merkleProof": "The merkle proof for the claim, sorted from the leaf to the root of the tree."
        }
      }
    },
    "title": "Cocodrop",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyClaim(uint256,uint256,bytes32[])": {
        "notice": "Verifies a claim."
      }
    },
    "notice": "...",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 615,
        "contract": "src/Cocodrop.sol:Cocodrop",
        "label": "airdrops",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Airdrop)592_storage)dyn_storage"
      },
      {
        "astId": 621,
        "contract": "src/Cocodrop.sol:Cocodrop",
        "label": "redeemed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Airdrop)592_storage)dyn_storage": {
        "base": "t_struct(Airdrop)592_storage",
        "encoding": "dynamic_array",
        "label": "struct Cocodrop.Airdrop[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(Airdrop)592_storage": {
        "encoding": "inplace",
        "label": "struct Cocodrop.Airdrop",
        "members": [
          {
            "astId": 586,
            "contract": "src/Cocodrop.sol:Cocodrop",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 589,
            "contract": "src/Cocodrop.sol:Cocodrop",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 591,
            "contract": "src/Cocodrop.sol:Cocodrop",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}