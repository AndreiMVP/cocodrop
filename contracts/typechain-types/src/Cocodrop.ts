/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CocodropInterface extends utils.Interface {
  functions: {
    "airdrops(uint256)": FunctionFragment;
    "createAirdrop(bytes32,address,uint256,string)": FunctionFragment;
    "redeem(uint256,address,bytes32[])": FunctionFragment;
    "redeemed(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "airdrops" | "createAirdrop" | "redeem" | "redeemed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "airdrops",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAirdrop",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "airdrops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemed", data: BytesLike): Result;

  events: {
    "NewAirdrop(uint256,bytes32,address,uint256,string)": EventFragment;
    "Redemption(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAirdrop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
}

export interface NewAirdropEventObject {
  airdropId: BigNumber;
  merkleRoot: string;
  token: string;
  amount: BigNumber;
  ipfs: string;
}
export type NewAirdropEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  NewAirdropEventObject
>;

export type NewAirdropEventFilter = TypedEventFilter<NewAirdropEvent>;

export interface RedemptionEventObject {
  airdropId: BigNumber;
  receiver: string;
  amount: BigNumber;
}
export type RedemptionEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedemptionEventObject
>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export interface Cocodrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CocodropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdrops(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        merkleRoot: string;
        token: string;
        amount: BigNumber;
      }
    >;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _airdropId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  airdrops(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      merkleRoot: string;
      token: string;
      amount: BigNumber;
    }
  >;

  createAirdrop(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _ipfs: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _airdropId: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    airdrops(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        merkleRoot: string;
        token: string;
        amount: BigNumber;
      }
    >;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _ipfs: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      _airdropId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewAirdrop(uint256,bytes32,address,uint256,string)"(
      airdropId?: PromiseOrValue<BigNumberish> | null,
      merkleRoot?: null,
      token?: null,
      amount?: null,
      ipfs?: null
    ): NewAirdropEventFilter;
    NewAirdrop(
      airdropId?: PromiseOrValue<BigNumberish> | null,
      merkleRoot?: null,
      token?: null,
      amount?: null,
      ipfs?: null
    ): NewAirdropEventFilter;

    "Redemption(uint256,address,uint256)"(
      airdropId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      amount?: null
    ): RedemptionEventFilter;
    Redemption(
      airdropId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      amount?: null
    ): RedemptionEventFilter;
  };

  estimateGas: {
    airdrops(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      _airdropId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airdrops(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _airdropId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
